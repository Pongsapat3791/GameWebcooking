# app.py (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏î‡πâ‡∏ß‡∏¢ OOP)
#
# --- ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á ---
# 1. ‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£ OOP: ‡∏™‡∏£‡πâ‡∏≤‡∏á Class `Player`, `GameState`, `GameRoom` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô
# 2. ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á Game Loop: ‡πÉ‡∏ä‡πâ "Master Game Loop" ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏∏‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà Active ‡∏≠‡∏¢‡∏π‡πà
#    ‡∏ã‡∏∂‡πà‡∏á‡∏ä‡πà‡∏ß‡∏¢‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ CPU ‡∏•‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏≤‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Loop ‡πÅ‡∏¢‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡πâ‡∏≠‡∏á
# 3. ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡∏∂‡πâ‡∏ô: ‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢, ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç, ‡πÅ‡∏•‡∏∞‡∏ï‡πà‡∏≠‡∏¢‡∏≠‡∏î‡πÑ‡∏î‡πâ‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô

import eventlet
eventlet.monkey_patch()

from flask import Flask, render_template, request
from flask_socketio import SocketIO, join_room, leave_room, emit
import random
import string
import time
import os
from threading import Lock

# --- ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô ---
app = Flask(__name__, template_folder='templates', static_folder='static')
app.config['SECRET_KEY'] = 'a-very-secret-key-for-the-game!'
socketio = SocketIO(app, async_mode='eventlet')

# --- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏° (Constants) ---
# ‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö Global ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
RECIPES = {
    '‡∏™‡∏•‡∏±‡∏î‡∏ú‡∏±‡∏Å': {'ingredients': sorted(['ü•¨', 'üçÖ', 'ü•ï']), 'points': 50, 'time_bonus': 10},
    '‡∏™‡∏õ‡∏≤‡πÄ‡∏Å‡πá‡∏ï‡∏ï‡∏µ‡πâ': {'ingredients': sorted(['üçù', 'ü•´', 'ü•©']), 'points': 110, 'time_bonus': 16},
    '‡πÑ‡∏≠‡∏®‡∏Å‡∏£‡∏µ‡∏°': {'ingredients': sorted(['üç®', 'üçí']), 'points': 35, 'time_bonus': 7},
    '‡∏ú‡∏•‡πÑ‡∏°‡πâ‡∏£‡∏ß‡∏°': {'ingredients': sorted(['üçì', 'üçå', 'üçé']), 'points': 30, 'time_bonus': 5},
    '‡∏ã‡∏µ‡∏ü‡∏π‡πâ‡∏î‡∏ï‡πâ‡∏°': {'ingredients': sorted(['ü¶û', 'üçÑ', 'üå∂Ô∏è']), 'points': 200, 'time_bonus': 22},
    '‡πÑ‡∏Å‡πà‡∏ó‡∏≠‡∏î': {'ingredients': sorted(['üçó', 'üçü']), 'points': 60, 'time_bonus': 10},
    '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏ä‡πâ‡∏≤‡∏ä‡∏∏‡∏î‡πÉ‡∏´‡∏ç‡πà': {'ingredients': sorted(['üç≥', 'üçû', 'üçÑ']), 'points': 170, 'time_bonus': 20},
    '‡∏™‡πÄ‡∏ï‡πá‡∏Å‡πÅ‡∏≠‡∏ô‡∏î‡πå‡∏ü‡∏£‡∏≤‡∏¢‡∏™‡πå': {'ingredients': sorted(['ü•ì', 'ü•ï', 'üçÑ']), 'points': 210, 'time_bonus': 24},
    '‡∏ã‡∏π‡∏ä‡∏¥': {'ingredients': sorted(['üç£', 'ü•¨']), 'points': 130, 'time_bonus': 18},
    '‡∏™‡∏•‡∏±‡∏î‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û': {'ingredients': sorted(['ü•ó', 'ü•ï', 'üçÖ']), 'points': 160, 'time_bonus': 18},
    '‡∏™‡πâ‡∏°‡∏ï‡∏≥': {'ingredients': sorted(['ü•ó', 'üå∂Ô∏è', 'üçÖ', 'ü•ú']), 'points': 140, 'time_bonus': 19},
}

ABILITIES_CONFIG = {
    '‡∏Å‡∏£‡∏∞‡∏ó‡∏∞': {'verb': '‡∏ó‡∏≠‡∏î', 'transformations': {'ü•ö': 'üç≥', 'ü•©': 'ü•ì'}},
    '‡∏´‡∏°‡πâ‡∏≠': {'verb': '‡∏ï‡πâ‡∏°', 'transformations': {'ü¶ê': 'ü¶û', 'ü•î': 'üçü'}},
    '‡πÄ‡∏Ç‡∏µ‡∏¢‡∏á': {'verb': '‡∏´‡∏±‡πà‡∏ô', 'transformations': {'ü•¨': 'ü•ó', 'ü•ï': 'ü•í','üêü': 'üç£'}}
}

LEVEL_DEFINITIONS = {
    1: {'target_score': 300, 'time': 130, 'spawn_interval': 3},
    2: {'target_score': 475, 'time': 120, 'spawn_interval': 3},
    3: {'target_score': 750, 'time': 110, 'spawn_interval': 3},
}

# --- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß ---
TRANSFORMED_TO_BASE_INGREDIENT = {transformed: base for ability_config in ABILITIES_CONFIG.values() for base, transformed in ability_config['transformations'].items()}
TRANSFORMED_ING_INFO = {transformed: ability for ability, config in ABILITIES_CONFIG.items() for transformed in config['transformations'].values()}
ALL_INGREDIENTS = list(set(ing for recipe in RECIPES.values() for ing in recipe['ingredients']))
NORMAL_RECIPES_KEYS = [k for k, v in RECIPES.items() if not any(ing in TRANSFORMED_TO_BASE_INGREDIENT for ing in v['ingredients'])]
ABILITY_TO_RECIPES = {
    ability: [
        recipe_name for recipe_name, recipe_data in RECIPES.items()
        if any(ing in recipe_data['ingredients'] for ing in config['transformations'].values())
    ]
    for ability, config in ABILITIES_CONFIG.items()
}

# --- ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏ö‡∏ö OOP ---

class Player:
    """‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô"""
    def __init__(self, sid, name):
        self.sid = sid
        self.name = name
        self.plate = []
        self.objective = None
        self.ability = None
        self.ability_processing = None # {'input': str, 'output': str, 'end_time': float}

    def assign_new_objective(self, possible_recipes):
        """‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô"""
        if not possible_recipes:
            possible_recipes = list(RECIPES.keys())
        objective_name = random.choice(possible_recipes)
        self.objective = {'name': objective_name}

class GameState:
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏°‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏±‡πâ‡∏ô‡πÜ ‡πÄ‡∏ä‡πà‡∏ô ‡∏î‡πà‡∏≤‡∏ô, ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô, ‡πÄ‡∏ß‡∏•‡∏≤"""
    def __init__(self, player_sids, players_map, level=1):
        self.is_active = True
        self.level = level
        self.score = 0
        self.total_score = 0
        self.target_score = LEVEL_DEFINITIONS[level]['target_score']
        self.time_left = LEVEL_DEFINITIONS[level]['time']
        self.player_order_sids = player_sids
        self.players_map = players_map # {sid: Player object}
        self.last_spawn_time = time.time()

    def tick(self):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡∏°‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÇ‡∏î‡∏¢ Master Game Loop)"""
        if not self.is_active:
            return
        self.time_left -= 1

    def check_ability_processing(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏£‡∏£‡∏π‡∏õ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô"""
        finished_players = []
        current_time = time.time()
        for player in self.players_map.values():
            if player.ability_processing and current_time >= player.ability_processing['end_time']:
                finished_players.append(player)
        return finished_players

    def get_spawnable_ingredients(self):
        """‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≥‡πÑ‡∏õ‡∏™‡∏∏‡πà‡∏°"""
        required_pool = set()
        for player in self.players_map.values():
            if player.objective and player.objective.get('name') in RECIPES:
                for ing in RECIPES[player.objective['name']]['ingredients']:
                    base_ingredient = TRANSFORMED_TO_BASE_INGREDIENT.get(ing, ing)
                    required_pool.add(base_ingredient)
        
        if not required_pool: # ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ ‡πÉ‡∏´‡πâ‡∏™‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            return [ing for ing in ALL_INGREDIENTS if ing not in TRANSFORMED_TO_BASE_INGREDIENT]
            
        return list(required_pool)

class GameRoom:
    """Class ‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡∏° 1 ‡∏´‡πâ‡∏≠‡∏á"""
    def __init__(self, room_id, host_sid, host_name):
        self.id = room_id
        self.host_sid = host_sid
        self.players = {host_sid: Player(host_sid, host_name)}
        self.game_state = None
        self.lock = Lock() # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Race Condition ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô

    def add_player(self, sid, name):
        with self.lock:
            if len(self.players) < 8:
                self.players[sid] = Player(sid, name)
                return True
            return False

    def remove_player(self, sid):
        with self.lock:
            if sid in self.players:
                del self.players[sid]
            if not self.players:
                return 'delete_room' # ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏ó‡∏¥‡πâ‡∏á
            if sid == self.host_sid:
                self.host_sid = list(self.players.keys())[0]
            if self.game_state and self.game_state.is_active:
                if sid in self.game_state.player_order_sids:
                    self.game_state.player_order_sids.remove(sid)
                if sid in self.game_state.players_map:
                    del self.game_state.players_map[sid]
                if len(self.game_state.player_order_sids) < 1:
                    self.game_state.is_active = False
                    return 'game_over_disconnect'
        return 'ok'

    def start_game(self):
        with self.lock:
            player_sids = list(self.players.keys())
            random.shuffle(player_sids)
            self.game_state = GameState(player_sids, self.players)
            self._assign_abilities()
            self._assign_all_objectives()
            
            # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
            ui_state = self.get_augmented_state_for_ui()
            for i, sid in enumerate(player_sids):
                left_sid = player_sids[i - 1]
                right_sid = player_sids[(i + 1) % len(player_sids)]
                emit('game_started', {
                    'initial_state': ui_state,
                    'your_sid': sid,
                    'your_name': self.players[sid].name,
                    'left_neighbor': self.players[left_sid].name,
                    'right_neighbor': self.players[right_sid].name
                }, room=sid)
            print(f"‡πÄ‡∏Å‡∏°‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á {self.id} ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß!")

    def _assign_abilities(self):
        """‡∏™‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á"""
        abilities_pool = list(ABILITIES_CONFIG.keys())
        random.shuffle(abilities_pool)
        for i, player in enumerate(self.players.values()):
            player.ability = abilities_pool[i] if i < len(abilities_pool) else None
            player.ability_processing = None

    def _assign_all_objectives(self):
        """‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô"""
        active_abilities = {p.ability for p in self.players.values() if p.ability}
        possible_recipes = list(NORMAL_RECIPES_KEYS)
        for ability in active_abilities:
            possible_recipes.extend(ABILITY_TO_RECIPES.get(ability, []))
        
        for player in self.players.values():
            player.assign_new_objective(possible_recipes)

    def update(self):
        """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÇ‡∏î‡∏¢ Master Game Loop ‡∏ó‡∏∏‡∏Å‡πÜ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ"""
        with self.lock:
            if not self.game_state or not self.game_state.is_active:
                return

            self.game_state.tick()

            # 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏£‡∏£‡∏π‡∏õ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
            finished_players = self.game_state.check_ability_processing()
            for player in finished_players:
                output_item = player.ability_processing['output']
                socketio.emit('receive_item', {'item': {'type': 'ingredient', 'name': output_item}}, room=player.sid)
                player.ability_processing = None

            # 2. ‡∏™‡∏∏‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö
            spawn_interval = LEVEL_DEFINITIONS[self.game_state.level]['spawn_interval']
            if time.time() - self.game_state.last_spawn_time > spawn_interval:
                spawnable_ings = self.game_state.get_spawnable_ingredients()
                if spawnable_ings:
                    for sid in self.game_state.player_order_sids:
                        ingredient = random.choice(spawnable_ings)
                        socketio.emit('receive_item', {'item': {'type': 'ingredient', 'name': ingredient}}, room=sid)
                self.game_state.last_spawn_time = time.time()

            # 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏à‡∏ö‡πÄ‡∏Å‡∏° (‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤)
            if self.game_state.time_left <= 0:
                self.game_state.is_active = False
                total_final_score = self.game_state.total_score + self.game_state.score
                socketio.emit('game_over', {'total_score': total_final_score, 'message': '‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤!'}, room=self.id)
                self.game_state = None # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡∏°
    
    def get_lobby_info(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ Lobby"""
        return {
            'players': [{'sid': p.sid, 'name': p.name} for p in self.players.values()],
            'host_sid': self.host_sid,
            'room_id': self.id
        }

    def get_augmented_state_for_ui(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏ô‡πâ‡∏≤ UI"""
        if not self.game_state: return None
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        ui_state = {
            'is_active': self.game_state.is_active,
            'level': self.game_state.level,
            'score': self.game_state.score,
            'total_score': self.game_state.total_score,
            'target_score': self.game_state.target_score,
            'time_left': self.game_state.time_left,
            'player_order_sids': self.game_state.player_order_sids,
        }

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
        ui_state['players_state'] = {
            sid: {
                'plate': p.plate,
                'objective': p.objective,
                'ability': p.ability,
                'ability_processing': p.ability_processing
            } for sid, p in self.players.items() if sid in self.game_state.players_map
        }
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ
        all_player_objectives = []
        for player in self.game_state.players_map.values():
            if player.objective and 'name' in player.objective:
                recipe_details = RECIPES[player.objective['name']]
                ingredients_with_hints = [
                    {'name': ing, 'hint': TRANSFORMED_ING_INFO.get(ing), 'base': TRANSFORMED_TO_BASE_INGREDIENT.get(ing)}
                    for ing in recipe_details['ingredients']
                ]
                all_player_objectives.append({
                    'player_name': player.name,
                    'objective_name': player.objective['name'],
                    'ingredients': ingredients_with_hints,
                    'points': recipe_details['points']
                })
        ui_state['all_player_objectives'] = all_player_objectives
        return ui_state

    def handle_player_action(self, sid, data):
        """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Action ‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô"""
        with self.lock:
            player = self.players.get(sid)
            if not player or not self.game_state or not self.game_state.is_active:
                return

            action_type = data.get('type')
            
            if action_type == 'pass_item':
                item_data = data.get('item')
                if item_data.get('type') == 'plate':
                    emit('action_fail', {'message': '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏à‡∏≤‡∏ô‡πÑ‡∏î‡πâ!', 'sound': 'error'}, room=sid)
                    return
                
                player_sids = self.game_state.player_order_sids
                if len(player_sids) <= 1: return

                player_index = player_sids.index(sid)
                direction = data.get('direction')
                target_sid = player_sids[player_index - 1] if direction == 'left' else player_sids[(player_index + 1) % len(player_sids)]
                socketio.emit('receive_item', {'item': item_data}, room=target_sid)

            elif action_type == 'add_to_plate':
                player.plate = data.get('new_plate_contents', [])

            elif action_type == 'submit_order':
                self._handle_submit_order(player)

            # ‡∏™‡πà‡∏á state ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏´‡∏•‡∏±‡∏á action
            ui_state = self.get_augmented_state_for_ui()
            if ui_state:
                socketio.emit('update_game_state', ui_state, room=self.id)

    def _handle_submit_order(self, player):
        """‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£"""
        player_plate = sorted(player.plate)
        objective_name = player.objective.get('name')
        if not objective_name or objective_name not in RECIPES:
            return

        required_ingredients = RECIPES[objective_name]['ingredients']
        if player_plate == required_ingredients:
            # ‡∏ó‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            recipe_data = RECIPES[objective_name]
            self.game_state.score += recipe_data['points']
            self.game_state.time_left = min(self.game_state.time_left + recipe_data['time_bonus'], 999)
            
            player.plate = []
            self._assign_all_objectives() # ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
            
            emit('action_success', {'message': f'‡∏ó‡∏≥ {objective_name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! (+{recipe_data["points"]} ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)', 'sound': 'success'}, room=player.sid)

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ú‡πà‡∏≤‡∏ô‡∏î‡πà‡∏≤‡∏ô
            if self.game_state.score >= self.game_state.target_score:
                self._level_up()
        else:
            emit('action_fail', {'message': '‡∏™‡∏π‡∏ï‡∏£‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! ‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á', 'sound': 'error'}, room=player.sid)

    def _level_up(self):
        """‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏î‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà"""
        current_level = self.game_state.level
        self.game_state.total_score += self.game_state.score
        next_level = current_level + 1

        if next_level in LEVEL_DEFINITIONS:
            # ‡πÑ‡∏õ‡∏î‡πà‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ
            self.game_state.is_active = False # ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏Å‡∏°‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
            socketio.emit('level_complete', {'level': current_level, 'level_score': self.game_state.score, 'total_score': self.game_state.total_score}, room=self.id)
            socketio.sleep(5) # ‡∏£‡∏≠ 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

            # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
            player_sids = list(self.players.keys())
            random.shuffle(player_sids)
            self.game_state = GameState(player_sids, self.players, level=next_level)
            self.game_state.total_score = self.game_state.total_score # ‡πÉ‡∏ä‡πâ total_score ‡πÄ‡∏î‡∏¥‡∏°
            self._assign_abilities()
            self._assign_all_objectives()
            
            socketio.emit('clear_all_items', {}, room=self.id)
            socketio.emit('start_next_level', self.get_augmented_state_for_ui(), room=self.id)
        else:
            # ‡∏ä‡∏ô‡∏∞‡πÄ‡∏Å‡∏°
            self.game_state.is_active = False
            socketio.emit('game_won', {'total_score': self.game_state.total_score}, room=self.id)
            self.game_state = None

    def use_ability(self, sid, item_name):
        with self.lock:
            player = self.players.get(sid)
            if not player or not self.game_state or not self.game_state.is_active: return

            if not player.ability or player.ability_processing:
                emit('action_fail', {'message': '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ', 'sound': 'error'}, room=sid)
                # [FIX] ‡∏™‡πà‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
                socketio.emit('receive_item', {'item': {'type': 'ingredient', 'name': item_name}}, room=sid)
                return

            ability_config = ABILITIES_CONFIG.get(player.ability)
            if not ability_config or item_name not in ability_config['transformations']:
                emit('action_fail', {'message': '‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ', 'sound': 'error'}, room=sid)
                # [FIX] ‡∏™‡πà‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô‡∏ñ‡πâ‡∏≤‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                socketio.emit('receive_item', {'item': {'type': 'ingredient', 'name': item_name}}, room=sid)
                return

            output_item = ability_config['transformations'][item_name]
            player.ability_processing = {'input': item_name, 'output': output_item, 'end_time': time.time() + 6}
            
            verb = ability_config['verb']
            emit('action_success', {'message': f'‡∏Å‡∏≥‡∏•‡∏±‡∏á{verb}{item_name}...', 'sound': 'click'}, room=sid)
            
            ui_state = self.get_augmented_state_for_ui()
            if ui_state:
                socketio.emit('update_game_state', ui_state, room=self.id)


# --- Global State & Master Loop ---
rooms = {} # {'room_id': GameRoom object}
rooms_lock = Lock()

def master_game_loop():
    """
    Master Loop ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏µ‡∏¢‡∏á Loop ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
    """
    while True:
        with rooms_lock:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á List ‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ block‡∏ô‡∏≤‡∏ô
            active_rooms = [room for room in rooms.values() if room.game_state and room.game_state.is_active]

        if not active_rooms:
            socketio.sleep(1) # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà ‡∏Å‡πá‡∏û‡∏±‡∏Å 1 ‡∏ß‡∏¥
            continue

        for room in active_rooms:
            room.update() # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ method update ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡πâ‡∏≠‡∏á
            # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏±‡πâ‡∏ô‡πÜ ‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            ui_state = room.get_augmented_state_for_ui()
            if ui_state:
                socketio.emit('update_game_state', ui_state, room=room.id)
        
        # ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å update ‡∏ó‡∏∏‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡∏Ñ‡πà‡∏≠‡∏¢ sleep
        # ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£ update ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ô‡∏ó‡∏∏‡∏Å 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        socketio.sleep(1)


# --- SocketIO Event Handlers ---
@app.route('/')
def index():
    return render_template('index.html')

@socketio.on('connect')
def handle_connect():
    print(f"‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤: {request.sid}")

@socketio.on('disconnect')
def handle_disconnect():
    print(f"‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: {request.sid}")
    room_to_update = None
    with rooms_lock:
        for room in rooms.values():
            if request.sid in room.players:
                room_to_update = room
                break
    
    if not room_to_update: return

    player_name = room_to_update.players.get(request.sid, Player(None, 'Unknown')).name
    result = room_to_update.remove_player(request.sid)
    print(f"‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô {player_name} ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á {room_to_update.id}")

    if result == 'delete_room':
        with rooms_lock:
            if room_to_update.id in rooms:
                del rooms[room_to_update.id]
            print(f"‡∏´‡πâ‡∏≠‡∏á {room_to_update.id} ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤, ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á")
        return
    
    if result == 'game_over_disconnect':
        total_final_score = room_to_update.game_state.total_score + room_to_update.game_state.score if room_to_update.game_state else 0
        socketio.emit('game_over', {'total_score': total_final_score, 'message': '‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏•‡πà‡∏ô‡∏ï‡πà‡∏≠ ‡πÄ‡∏Å‡∏°‡∏à‡∏ö‡∏•‡∏á'}, room=room_to_update.id)
        room_to_update.game_state = None

    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Lobby ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ö‡πâ‡∏≤‡∏ô
    socketio.emit('update_lobby', room_to_update.get_lobby_info(), room=room_to_update.id)
    if room_to_update.host_sid == request.sid: # ‡∏ñ‡πâ‡∏≤ host ‡πÄ‡∏î‡∏¥‡∏°‡∏≠‡∏≠‡∏Å
        socketio.emit('new_host', {'host_sid': room_to_update.host_sid}, room=room_to_update.id)

    if room_to_update.game_state and room_to_update.game_state.is_active:
        player_sids = room_to_update.game_state.player_order_sids
        for i, sid in enumerate(player_sids):
            left_sid = player_sids[i - 1]
            right_sid = player_sids[(i + 1) % len(player_sids)]
            socketio.emit('update_neighbors', {
                'left_neighbor': room_to_update.players[left_sid].name,
                'right_neighbor': room_to_update.players[right_sid].name
            }, room=sid)
        ui_state = room_to_update.get_augmented_state_for_ui()
        if ui_state:
            socketio.emit('update_game_state', ui_state, room=room_to_update.id)

@socketio.on('create_room')
def handle_create_room(data):
    player_name = data.get('name', '‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ô‡∏¥‡∏£‡∏ô‡∏≤‡∏°')
    while True:
        room_id = ''.join(random.choices(string.ascii_uppercase + string.digits, k=4))
        if room_id not in rooms:
            break
    
    room = GameRoom(room_id, request.sid, player_name)
    with rooms_lock:
        rooms[room_id] = room
    
    join_room(room_id)
    emit('room_created', {'room_id': room_id, 'is_host': True})
    socketio.emit('update_lobby', room.get_lobby_info(), room=room_id)

@socketio.on('join_room')
def handle_join_room(data):
    player_name = data.get('name', '‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ô‡∏¥‡∏£‡∏ô‡∏≤‡∏°')
    room_id = data.get('room_id', '').upper()

    with rooms_lock:
        room = rooms.get(room_id)

    if not room:
        emit('error_message', {'message': '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ!'})
        return
    if room.game_state and room.game_state.is_active:
        emit('error_message', {'message': '‡πÄ‡∏Å‡∏°‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß!'})
        return
    
    if not room.add_player(request.sid, player_name):
        emit('error_message', {'message': '‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß!'})
        return

    join_room(room_id)
    emit('join_success', {'room_id': room_id, 'is_host': request.sid == room.host_sid})
    socketio.emit('update_lobby', room.get_lobby_info(), room=room_id)

@socketio.on('start_game')
def handle_start_game(data):
    room_id = data.get('room_id')
    with rooms_lock:
        room = rooms.get(room_id)
    if not room or room.host_sid != request.sid:
        return
    room.start_game()

@socketio.on('player_action')
def handle_player_action(data):
    room_id = data.get('room_id')
    with rooms_lock:
        room = rooms.get(room_id)
    if room:
        room.handle_player_action(request.sid, data)

@socketio.on('use_ability')
def handle_use_ability(data):
    room_id = data.get('room_id')
    item_name = data.get('item_name')
    with rooms_lock:
        room = rooms.get(room_id)
    if room:
        room.use_ability(request.sid, item_name)

# --- Main Execution ---
if __name__ == '__main__':
    print("‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà http://127.0.0.1:5000")
    # ‡πÄ‡∏£‡∏¥‡πà‡∏° Master Game Loop ‡πÉ‡∏ô Background
    socketio.start_background_task(target=master_game_loop)
    socketio.run(app, host='0.0.0.0', port=5000, debug=False)
